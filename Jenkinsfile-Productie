pipeline {
    agent any
    tools {nodejs "node-6.11"}
	parameters {
        string(name: 'PORT', defaultValue: '3333')
    }
    stages{
        stage('Initializing stage') {
            steps {
                checkout scm
            }
        }
		stage('Unit tests') {
            steps {
                sh 'npm install'
                sh 'npm run unit-test'
            }
        }
        stage('Build image') {
            steps {
                script {
                    app = docker.build("hansschollaardt/node-todo")
                }
            }
        }

        stage('Deploy for integration test') {
           steps {
               script { 
					sh "echo Running instance on port: ${params.PORT}"
                    sh "docker run --rm -p ${params.PORT}:${params.PORT} -e PORT=${params.PORT} -d --name=test-productie hansschollaardt/node-todo"
               }
            }
        }
        stage('Test image') {
            steps {
                sh 'npm run selenium-test'	
				sh 'docker stop test-productie || true'
            }
        }
        stage('Push image') {
            steps {
                script {
					docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
                       app.push("prod-${env.BUILD_NUMBER}")
                       app.push("prod-latest")
                    }
                }
            }  
        }
        stage('Deploy productie') {
            steps {
                sh 'echo "Now we can deploy our image"' 
                // continue even if container was not running (yet)
				script {
					def userInput = input(
						id: 'Proceed1', message: 'Deploy?', parameters: [
							[$class: 'BooleanParameterDefinition', defaultValue: true, description: 'Weet je zeker dat deze versie gedeployed moet worden? Dit levert een korte downtime op!', name: 'Klaar om te deployen?']
						]
					)
				}
				sh 'docker stop docker-todo-productie || true' 
                script {
					docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
						app.run('--rm -p 8002:9090 -d --name="docker-todo-productie"');
					}
		}
            }
        }
    }
}
